// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             (unknown)
// source: sreeify.proto

package gen

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	SreeificationService_Sreeify_FullMethodName = "/sreeify.SreeificationService/Sreeify"
)

// SreeificationServiceClient is the client API for SreeificationService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type SreeificationServiceClient interface {
	Sreeify(ctx context.Context, in *SreeifyRequest, opts ...grpc.CallOption) (*SreeifyResponse, error)
}

type sreeificationServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewSreeificationServiceClient(cc grpc.ClientConnInterface) SreeificationServiceClient {
	return &sreeificationServiceClient{cc}
}

func (c *sreeificationServiceClient) Sreeify(ctx context.Context, in *SreeifyRequest, opts ...grpc.CallOption) (*SreeifyResponse, error) {
	out := new(SreeifyResponse)
	err := c.cc.Invoke(ctx, SreeificationService_Sreeify_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// SreeificationServiceServer is the server API for SreeificationService service.
// All implementations must embed UnimplementedSreeificationServiceServer
// for forward compatibility
type SreeificationServiceServer interface {
	Sreeify(context.Context, *SreeifyRequest) (*SreeifyResponse, error)
	mustEmbedUnimplementedSreeificationServiceServer()
}

// UnimplementedSreeificationServiceServer must be embedded to have forward compatible implementations.
type UnimplementedSreeificationServiceServer struct {
}

func (UnimplementedSreeificationServiceServer) Sreeify(context.Context, *SreeifyRequest) (*SreeifyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Sreeify not implemented")
}
func (UnimplementedSreeificationServiceServer) mustEmbedUnimplementedSreeificationServiceServer() {}

// UnsafeSreeificationServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to SreeificationServiceServer will
// result in compilation errors.
type UnsafeSreeificationServiceServer interface {
	mustEmbedUnimplementedSreeificationServiceServer()
}

func RegisterSreeificationServiceServer(s grpc.ServiceRegistrar, srv SreeificationServiceServer) {
	s.RegisterService(&SreeificationService_ServiceDesc, srv)
}

func _SreeificationService_Sreeify_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SreeifyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SreeificationServiceServer).Sreeify(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SreeificationService_Sreeify_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SreeificationServiceServer).Sreeify(ctx, req.(*SreeifyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// SreeificationService_ServiceDesc is the grpc.ServiceDesc for SreeificationService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var SreeificationService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "sreeify.SreeificationService",
	HandlerType: (*SreeificationServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Sreeify",
			Handler:    _SreeificationService_Sreeify_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "sreeify.proto",
}
