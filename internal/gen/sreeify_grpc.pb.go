// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             (unknown)
// source: sreeify.proto

package gen

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	SreeificationService_Sreeify_FullMethodName = "/sreeify.SreeificationService/Sreeify"
)

// SreeificationServiceClient is the client API for SreeificationService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type SreeificationServiceClient interface {
	Sreeify(ctx context.Context, opts ...grpc.CallOption) (SreeificationService_SreeifyClient, error)
}

type sreeificationServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewSreeificationServiceClient(cc grpc.ClientConnInterface) SreeificationServiceClient {
	return &sreeificationServiceClient{cc}
}

func (c *sreeificationServiceClient) Sreeify(ctx context.Context, opts ...grpc.CallOption) (SreeificationService_SreeifyClient, error) {
	stream, err := c.cc.NewStream(ctx, &SreeificationService_ServiceDesc.Streams[0], SreeificationService_Sreeify_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &sreeificationServiceSreeifyClient{stream}
	return x, nil
}

type SreeificationService_SreeifyClient interface {
	Send(*Sreequest) error
	Recv() (*Sreesponse, error)
	grpc.ClientStream
}

type sreeificationServiceSreeifyClient struct {
	grpc.ClientStream
}

func (x *sreeificationServiceSreeifyClient) Send(m *Sreequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *sreeificationServiceSreeifyClient) Recv() (*Sreesponse, error) {
	m := new(Sreesponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// SreeificationServiceServer is the server API for SreeificationService service.
// All implementations must embed UnimplementedSreeificationServiceServer
// for forward compatibility
type SreeificationServiceServer interface {
	Sreeify(SreeificationService_SreeifyServer) error
	mustEmbedUnimplementedSreeificationServiceServer()
}

// UnimplementedSreeificationServiceServer must be embedded to have forward compatible implementations.
type UnimplementedSreeificationServiceServer struct {
}

func (UnimplementedSreeificationServiceServer) Sreeify(SreeificationService_SreeifyServer) error {
	return status.Errorf(codes.Unimplemented, "method Sreeify not implemented")
}
func (UnimplementedSreeificationServiceServer) mustEmbedUnimplementedSreeificationServiceServer() {}

// UnsafeSreeificationServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to SreeificationServiceServer will
// result in compilation errors.
type UnsafeSreeificationServiceServer interface {
	mustEmbedUnimplementedSreeificationServiceServer()
}

func RegisterSreeificationServiceServer(s grpc.ServiceRegistrar, srv SreeificationServiceServer) {
	s.RegisterService(&SreeificationService_ServiceDesc, srv)
}

func _SreeificationService_Sreeify_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(SreeificationServiceServer).Sreeify(&sreeificationServiceSreeifyServer{stream})
}

type SreeificationService_SreeifyServer interface {
	Send(*Sreesponse) error
	Recv() (*Sreequest, error)
	grpc.ServerStream
}

type sreeificationServiceSreeifyServer struct {
	grpc.ServerStream
}

func (x *sreeificationServiceSreeifyServer) Send(m *Sreesponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *sreeificationServiceSreeifyServer) Recv() (*Sreequest, error) {
	m := new(Sreequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// SreeificationService_ServiceDesc is the grpc.ServiceDesc for SreeificationService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var SreeificationService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "sreeify.SreeificationService",
	HandlerType: (*SreeificationServiceServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Sreeify",
			Handler:       _SreeificationService_Sreeify_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "sreeify.proto",
}
